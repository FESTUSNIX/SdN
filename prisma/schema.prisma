generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole    @default(USER)
  accounts      Account[]
  sessions      Session[]
  emails        UnitEmail[]
  unit          Unit?       @relation(fields: [unitId], references: [id])
  unitId        Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Unit {
  id            Int            @id @default(autoincrement())
  name          String
  logo          String?
  isPublic      Boolean        @default(true)
  nip           String?
  regon         String?
  unitType      String         @default("uczelnia")
  website       String
  updatedAt     DateTime?      @updatedAt
  cityId        Int
  email         String
  notes         String?
  phone         String?
  slug          String         @unique @default(cuid())
  workStatus    WorkStatus     @default(IN_PROGRESS)
  managers      User[]
  majors        Major[]
  city          City           @relation(fields: [cityId], references: [id])
  address       UnitAddress?
  emails        UnitEmail[]
  subscriptions Subscription[]
  gallery       Json[]         @default([])

  @@unique([id, slug])
  @@index([name, slug])
}

model Major {
  id                    Int              @id @default(autoincrement())
  name                  String
  cost                  Int?
  unitId                Int
  address               String?
  certificates          String?
  daysOfWeek            DaysOfWeek[]
  formOfStudy           String?          @default("zaoczne")
  numberOfSemesters     Int?
  organisator           String?
  updatedAt             DateTime         @default(now()) @updatedAt
  canPayInInstallments  Boolean          @default(false)
  durationInHours       Int?
  isOnline              Boolean          @default(false)
  onlineDuration        Int?
  endDate               DateTime?        @db.Date
  startDate             DateTime?        @db.Date
  contact               String?
  isRegulated           Boolean          @default(true)
  majorLevel            MajorLevel       @default(PODYPLOMOWE)
  workStatus            WorkStatus       @default(IN_PROGRESS)
  unitSlug              String
  completionConditions  Json?
  description           Json?
  recruitmentConditions Json?
  syllabus              Json?
  slug                  String           @unique @default(cuid())
  unit                  Unit             @relation(fields: [unitId, unitSlug], references: [id, slug])
  qualifications        Qualification[]  @relation("MajorToQualification")
  keywords              String[]
  status                Status           @default(DRAFT)
  url                   String?
  PromotedMajors        PromotedMajors[]

  @@index([name])
}

model PromotedMajors {
  id         Int      @id @default(autoincrement())
  major      Major    @relation(fields: [majorId], references: [id])
  majorId    Int
  promotedAt DateTime @default(now())
}

model UnitAddress {
  id         Int     @id @default(autoincrement())
  street     String?
  postalCode String?
  unitId     Int     @unique
  unit       Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model UnitEmail {
  id      Int      @id @default(autoincrement())
  title   String
  content Json
  sentAt  DateTime
  sentBy  String
  sentTo  String[]
  unitId  Int
  user    User     @relation(fields: [sentBy], references: [id])
  unit    Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model Qualification {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  keywords String[]
  slug     String            @unique
  type     QualificationType @default(OGOLNE)
  majors   Major[]           @relation("MajorToQualification")
}

model Voivodeship {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

model City {
  id            Int         @id @default(autoincrement())
  name          String
  voivodeshipId Int
  voivodeship   Voivodeship @relation(fields: [voivodeshipId], references: [id])
  units         Unit[]
}

model Subscription {
  slug   String    @id @default(cuid())
  unit   Unit      @relation(fields: [unitId], references: [id])
  unitId Int
  from   DateTime  @default(now())
  to     DateTime?
  type   String
}

model statistics {
  id           Int      @id @default(autoincrement())
  date         DateTime @unique @default(now())
  majors_count Int
  units_count  Int
}

enum UserRole {
  ADMIN
  USER
  UNIT
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum MajorLevel {
  PIERWSZEGO_STOPNIA
  DRUGIEGO_STOPNIA
  JEDNOLITE_MAGISTERSKIE
  PODYPLOMOWE
}

enum WorkStatus {
  FINISHED
  IN_PROGRESS
  TO_CHECK
}

enum QualificationType {
  OGOLNE
  SPECJALISTYCZNE
  ZAWODOWE
  INNE
}

enum Status {
  PUBLISHED
  DRAFT
  ARCHIVED
}
