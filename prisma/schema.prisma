generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Unit {
  id        Int          @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  isPublic  Boolean      @default(true)
  notes     String?
  website   String
  unitType  String       @default("uczelnia")
  cityId    Int
  city      City         @relation(fields: [cityId], references: [id])
  logo      String?
  nip       String?
  regon     String?
  updatedAt DateTime?    @updatedAt
  majors    Major[]
  address   UnitAddress?
  status    UnitStatus

  @@index([name])
}

model Major {
  id                    Int                  @id @default(autoincrement())
  name                  String
  unitId                Int
  majorLevel            MajorLevel           @default(PODYPLOMOWE)
  cost                  Int?
  address               String?
  isRegulated           Boolean?             @default(true)
  certificates          String?
  completionConditions  String?
  daysOfWeek            DaysOfWeek[]
  description           String?
  formOfStudy           String?              @default("zaoczne")
  numberOfSemesters     Int?
  organisator           String?
  recruitmentConditions String?
  syllabus              String?
  updatedAt             DateTime             @default(now()) @updatedAt
  canPayInInstallments  Boolean?             @default(false)
  durationInHours       Int?
  isOnline              Boolean?             @default(false)
  onlineDuration        Int?
  endDate               DateTime?            @db.Date
  startDate             DateTime?            @db.Date
  contact               ContactPerson?
  unit                  Unit                 @relation(fields: [unitId], references: [id], onUpdate: NoAction)
  qualifications        MajorQualification[]

  @@index([name])
}

model ContactPerson {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  phone   String
  majorId Int    @unique
  major   Major  @relation(fields: [majorId], references: [id])
}

model UnitAddress {
  id         Int     @id @default(autoincrement())
  street     String?
  postalCode String?
  cityId     Int
  unitId     Int     @unique
  city       City    @relation(fields: [cityId], references: [id])
  unit       Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model MajorQualification {
  id              Int           @id @default(autoincrement())
  majorId         Int
  qualificationId Int
  major           Major         @relation(fields: [majorId], references: [id])
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
}

model Qualification {
  id       Int                  @id @default(autoincrement())
  name     String               @unique
  type     MajorType
  majors   MajorQualification[]
  keywords String[]
}

model Voivodeship {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

model City {
  id            Int           @id @default(autoincrement())
  name          String
  voivodeshipId Int
  voivodeship   Voivodeship   @relation(fields: [voivodeshipId], references: [id])
  unitAddress   UnitAddress[]
  units         Unit[]
}

enum MajorType {
  OGOLNE
  ZAWODOWE
  SPECJALISTYCZNE
  INNE
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum MajorLevel {
  PIERWSZEGO_STOPNIA
  DRUGIEGO_STOPNIA
  JEDNOLITE_MAGISTERSKIE
  PODYPLOMOWE
}

enum UnitStatus {
  FINISHED
  IN_PROGRESS
}
