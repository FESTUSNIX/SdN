generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole    @default(USER)
  accounts      Account[]
  sessions      Session[]
  emails        UnitEmail[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Unit {
  id        Int          @id @default(autoincrement())
  slug      String       @unique @default(cuid())
  name      String
  email     String
  phone     String?
  isPublic  Boolean      @default(true)
  notes     String?
  website   String
  unitType  String       @default("uczelnia")
  cityId    Int
  city      City         @relation(fields: [cityId], references: [id])
  logo      String?
  nip       String?
  regon     String?
  updatedAt DateTime?    @updatedAt
  majors    Major[]
  address   UnitAddress?
  status    Status       @default(IN_PROGRESS)
  emails    UnitEmail[]

  @@unique([id, slug])
  @@index([name, slug])
}

model Major {
  id                    Int             @id @default(autoincrement())
  name                  String
  unitId                Int
  unitSlug              String
  majorLevel            MajorLevel      @default(PODYPLOMOWE)
  cost                  Int?
  address               String?
  isRegulated           Boolean         @default(true)
  certificates          String?
  completionConditions  Json?
  daysOfWeek            DaysOfWeek[]
  description           Json?
  formOfStudy           String?         @default("zaoczne")
  numberOfSemesters     Int?
  organisator           String?
  recruitmentConditions Json?
  syllabus              Json?
  updatedAt             DateTime        @default(now()) @updatedAt
  canPayInInstallments  Boolean         @default(false)
  durationInHours       Int?
  isOnline              Boolean         @default(false)
  onlineDuration        Int?
  endDate               DateTime?       @db.Date
  startDate             DateTime?       @db.Date
  contact               String?
  unit                  Unit            @relation(fields: [unitId], references: [id])
  qualifications        Qualification[]
  status                Status          @default(IN_PROGRESS)

  @@index([name])
}

model UnitAddress {
  id         Int     @id @default(autoincrement())
  street     String?
  postalCode String?
  cityId     Int
  unitId     Int     @unique
  city       City    @relation(fields: [cityId], references: [id])
  unit       Unit    @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model UnitEmail {
  id      Int      @id @default(autoincrement())
  title   String
  content Json
  sentAt  DateTime
  sentBy  String
  sentTo  String[]
  user    User     @relation(fields: [sentBy], references: [id])
  unitId  Int
  unit    Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model Qualification {
  id       Int               @id @default(autoincrement())
  slug     String            @unique
  name     String            @unique
  type     QualificationType @default(OGOLNE)
  majors   Major[]
  keywords String[]
}

model Voivodeship {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

model City {
  id            Int           @id @default(autoincrement())
  name          String
  voivodeshipId Int
  voivodeship   Voivodeship   @relation(fields: [voivodeshipId], references: [id])
  unitAddress   UnitAddress[]
  units         Unit[]
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum MajorLevel {
  PIERWSZEGO_STOPNIA
  DRUGIEGO_STOPNIA
  JEDNOLITE_MAGISTERSKIE
  PODYPLOMOWE
}

enum Status {
  FINISHED
  IN_PROGRESS
  TO_CHECK
}

enum QualificationType {
  OGOLNE
  SPECJALISTYCZNE
  ZAWODOWE
  INNE
}
