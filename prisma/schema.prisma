generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Unit {
  id        Int          @id @default(autoincrement())
  name      String
  logo      String
  isPublic  Boolean      @default(true)
  nip       String?
  regon     String?
  /// uczelnia / placówka doskonalenia nauczycieli / inna
  unitType  String       @default("uczelnia")
  website   String?
  updatedAt DateTime?    @updatedAt
  majors    Major[]
  address   UnitAddress?
}

model Major {
  id                    Int                  @id @default(autoincrement())
  name                  String
  cost                  Int
  unitId                Int
  /// Miejsce prowadzenia zajęć
  address               String?
  isRegulated           Boolean              @default(true)
  certificates          String?
  completionConditions  String?
  daysOfWeek            DaysOfWeek[]
  description           String
  formOfStudy           String               @default("zaoczne")
  numberOfSemesters     Int
  organisator           String
  recruitmentConditions String?
  majorLevel            MajorLevel          @default(PODYPLOMOWE)  
  /// Program studiów
  syllabus              String?
  updatedAt             DateTime             @default(now()) @updatedAt
  canPayInInstallments  Boolean              @default(false)
  durationInHours       Int
  isOnline              Boolean              @default(false)
  onlineDuration        Int?
  endDate               DateTime?            @db.Date
  startDate             DateTime?            @db.Date
  contact               ContactPerson?
  unit                  Unit                 @relation(fields: [unitId], references: [id], onUpdate: NoAction)
  qualifications        MajorQualification[]
}

model ContactPerson {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  phone   String
  majorId Int    @unique
  major   Major  @relation(fields: [majorId], references: [id])
}

model UnitAddress {
  id         Int    @id @default(autoincrement())
  street     String
  postalCode String
  cityId     Int
  unitId     Int    @unique
  city       City   @relation(fields: [cityId], references: [id])
  unit       Unit   @relation(fields: [unitId], references: [id])
}

model MajorQualification {
  id              Int           @id @default(autoincrement())
  majorId         Int
  qualificationId Int
  major           Major         @relation(fields: [majorId], references: [id])
  qualification   Qualification @relation(fields: [qualificationId], references: [id])
}

model Qualification {
  id     Int                  @id @default(autoincrement())
  name   String               @unique
  type   MajorType
  majors MajorQualification[]
}

model Voivodeship {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

model City {
  id            Int           @id @default(autoincrement())
  name          String
  voivodeshipId Int
  voivodeship   Voivodeship   @relation(fields: [voivodeshipId], references: [id])
  unitAddress   UnitAddress[]
}

enum MajorType {
  OGOLNE
  ZAWODOWE
  SPECJALISTYCZNE
  INNE
}

enum DaysOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}


enum MajorLevel {
  PIERWSZEGO_STOPNIA
  DRUGIEGO_STOPNIA
  JEDNOLITE_MAGISTERSKIE
  PODYPLOMOWE
}